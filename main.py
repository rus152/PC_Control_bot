import telebot
from telebot import types
from tkinter import *
from tkinter import messagebox
import os
import re
import json
import random
import threading

debug_start = 0
debug_user_data = 0
debug_full = 0

""" –§–∏–≥–Ω—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ """
if(debug_start == 1):
    try:
        os.remove(os.getenv('APPDATA') + '\PC_Control_Bot\\token')
    except:
        pass
    messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–¢–æ–∫–µ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω")
    exit()

if(debug_user_data == 1):
    try:
        os.remove(os.getenv('APPDATA') + '\PC_Control_Bot\\Users.json')
    except:
        pass
    messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã")
    exit()

if(debug_full == 1):
    os.remove(os.getenv('APPDATA') + '\PC_Control_Bot\\token')
    os.remove(os.getenv('APPDATA') + '\PC_Control_Bot\\Users.json')
    os.rmdir(os.getenv('APPDATA') + '\PC_Control_Bot')
    messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞")

""" –°–ª–æ–≤–∞—Ä—å """
user_data = {}
user_states = {}

""" –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ """

def on_confirm():
    global user_input  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_input = enter_token.get() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è

    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ """

    if validate_token(user_input):
        messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω")
        tkn_val = 1
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
        tkn_val = 0

    """ –í–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤ APPDATA —Ç–æ–∫–µ–Ω–∞, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è """

    if (tkn_val == 1):
        try:
            os.mkdir(os.getenv('APPDATA') + '\PC_Control_Bot')
        except:
            pass
        f = open(os.getenv('APPDATA') + '\PC_Control_Bot\\token', 'w')
        f.write(user_input)
        f.close()
        window.destroy()
    else:
        pass

def validate_token(token):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–ª–∏–Ω—ã. """
    pattern = re.compile(r"^\d{10}:.+$")  # –ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ - —Ü–∏—Ñ—Ä—ã, –∑–∞—Ç–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã
    return pattern.match(token) is not None and len(token) == 46

def on_exit():
    exit()

def login_system(user_id):
    if user_id in banned_users:
        return "ban"
    elif user_id in verified_users:
        return "val"
    else:
        pass


def generate_code():
    return random.randint(100000, 999999)

def get_user_state(user_id):
    return user_states.get(user_id, None)

def set_user_state(user_id, state):
    user_states[user_id] = state

def save_data():
    with open(os.getenv('APPDATA') + '\PC_Control_Bot\\Users.json', 'w') as file:
        json.dump({"verified": list(verified_users), "banned": list(banned_users)}, file)

def code_display(chat_id):
    window = Tk()
    window.title("–¢–µ—Å—Ç –æ–∫–Ω–æ")

    lbl = Label(window, text=f'{user_data[chat_id]}'[0])
    lbl.grid(column=0, row=0)

    lbl = Label(window, text=f'{user_data[chat_id]}'[1])
    lbl.grid(column=1, row=0)

    lbl = Label(window, text=f'{user_data[chat_id]}'[2])
    lbl.grid(column=2, row=0)

    lbl = Label(window, text=f'{user_data[chat_id]}'[3])
    lbl.grid(column=3, row=0)

    lbl = Label(window, text=f'{user_data[chat_id]}'[4])
    lbl.grid(column=4, row=0)

    lbl = Label(window, text=f'{user_data[chat_id]}'[5])
    lbl.grid(column=5, row=0)

    window.mainloop()

def get_keyboard() -> types.ReplyKeyboardMarkup:
    """
    Creates and returns a keyboard for the bot.
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    but1 = types.KeyboardButton("/shutdown")
    but2 = types.KeyboardButton("/Online")
    but3 = types.KeyboardButton("/hibernation")
    but5 = types.KeyboardButton("/Screen")
    but6 = types.KeyboardButton("/locküîí")
    but4 = types.KeyboardButton("/cancel")
    markup.add(but1, but2, but3, but5, but6, but4)
    return markup

def time_select1(message):
    txt = message.text

    markup = get_keyboard()
    bot.reply_to(message, "–í—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫", parse_mode='html', reply_markup=markup)



""" –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ APPDATA –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –µ–≥–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ """

try:
    f = open(os.getenv('APPDATA') + '\PC_Control_Bot\\token', 'r')
    f.close()
except (IOError) and (Exception):
    window = Tk()
    window.title("–¢–µ—Å—Ç –æ–∫–Ω–æ")

    lbl = Label(window, text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –¢–æ–∫–µ–Ω")
    lbl.grid(column=1, row=0)

    enter_token = Entry(window)
    enter_token.grid(column=1, row=1)

    confirm_button = Button(window, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", command=on_confirm)
    confirm_button.grid(column=0, row=2)

    exit_button = Button(window, text="–í—ã–π—Ç–∏", command=on_exit)
    exit_button.grid(column=3, row=2)

    window.mainloop()

"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

if not os.path.exists(os.getenv('APPDATA') + '\PC_Control_Bot\\Users.json'):
    with open(os.getenv('APPDATA') + '\PC_Control_Bot\\Users.json', 'w') as file:
        json.dump({"verified": [], "banned": []}, file)

with open(os.getenv('APPDATA') + '\PC_Control_Bot\\Users.json') as file:
    data = json.load(file)

verified_users = set(data['verified'])
banned_users = set(data['banned'])


token_code = open(os.getenv('APPDATA') + '\PC_Control_Bot\\token', 'r')
token = token_code.read()
token_code.close()

bot = telebot.TeleBot(token)

@bot.message_handler(commands=['start'], func=lambda message: get_user_state(message.chat.id) == None)
def send_welcome(message):
    user_id = message.from_user.id
    if login_system(user_id) == "val":
        markup = get_keyboard()
        bot.reply_to(message, "–í—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫", parse_mode='html', reply_markup=markup)
    elif login_system(user_id) == "ban":
        bot.reply_to(message, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–ª–∏–µ–Ω—Ç–µ")
    else:
        bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∞—É–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /ver")


@bot.message_handler(commands=['ver'], func=lambda message: get_user_state(message.chat.id) == None)
def ver_message(message):
    user_id = message.from_user.id
    if login_system(user_id) == "val":
        bot.send_message(message.chat.id, f'–ù–µ —Å—Ç–æ–∏—Ç {message.from_user.first_name}. –í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã')
    elif login_system(user_id) == "ban":
        bot.send_message(message.chat.id, f'–í—ã —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        chat_id = message.chat.id
        user_data[chat_id] = generate_code()
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", user_data[chat_id])

        t1 = threading.Thread(target=code_display, args=(chat_id,))

        t1.start()
        bot.send_message(message.chat.id, f'–í–∞–º –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤—ã–≤–µ–ª–∏—Å—å —á–∏—Å–ª–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å—é–¥–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∞—É–Ω—Ç–∞')
        set_user_state(user_id, 'waiting_for_code')

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'waiting_for_code')
def check_code(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    try:
        user_code = int(message.text)
        if chat_id in user_data and user_data[chat_id] == user_code:
            bot.reply_to(message, "–ö–æ–¥ –≤–∞–ª–∏–¥–µ–Ω! –í—ã —Ç–µ–ø–µ—Ä—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.")
            verified_users.add(user_id)
            save_data()
            set_user_state(user_id, None)
        else:
            bot.reply_to(message, "–ö–æ–¥ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω. –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
            banned_users.add(user_id)
            save_data()
            set_user_state(user_id, None)
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥.")

@bot.message_handler(commands=['shutdown'], func=lambda message: get_user_state(message.chat.id) == None)
def ver_message(message):
    user_id = message.from_user.id
    if login_system(user_id) == "val":
        set_user_state(user_id, 'Selects_the_input_type_time')
        type_time = types.ReplyKeyboardMarkup(resize_keyboard=True)
        but0 = types.KeyboardButton("–ß–∞—Å—ã")
        but1 = types.KeyboardButton("–ú–∏–Ω—É—Ç—ã")
        but2 = types.KeyboardButton("–°–µ–∫—É–Ω–¥—ã")
        but3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        type_time.add(but0, but1, but2, but3)
        bot.send_message(message.chat.id, '–í —á—ë–º –ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è?',
                         parse_mode='html', reply_markup=type_time)
        bot.register_next_step_handler(message, time_select1)

    elif login_system(user_id) == "ban":
        bot.reply_to(message,
                     "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–ª–∏–µ–Ω—Ç–µ")
    else:
        bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∞—É–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /ver")



bot.polling(none_stop=True)

