from tkinter import *
from tkinter import messagebox
import os
import re
import json
import random
import threading
import sys
import time
import requests

import telebot
from telebot import types
from notifypy import Notify
import pystray
from PIL import Image
from PIL import ImageGrab

###############
#   –û–¢–õ–ê–î–ö–ê   #
###############
debug = 1



###############
#   –°–õ–û–í–ê–†–ò   #
###############

user_data = {}
user_states = {}

########################
#   –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏   #
########################

def on_confirm():
    global user_input
    user_input = enter_token.get()

    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ """

    if validate_token(user_input):
        messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω")
        tkn_val = 1
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
        tkn_val = 0

    """ –í–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤ APPDATA —Ç–æ–∫–µ–Ω–∞, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è """

    if (tkn_val == 1):
        try:
            os.mkdir(os.getenv('APPDATA') + '\\PC_Control_Bot')
        except:
            pass
        f = open(os.getenv('APPDATA') + '\\PC_Control_Bot\\token', 'w')
        f.write(user_input)
        f.close()
        window.destroy()
    else:
        pass

def validate_token(token):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–ª–∏–Ω—ã. """
    pattern = re.compile(r"^\d{10}:.+$")
    return pattern.match(token) is not None and len(token) == 46

def on_exit():
    os._exit(0)

def login_system(user_id):
    if user_id in banned_users:
        return "ban"
    elif user_id in verified_users:
        return "val"
    else:
        pass


def generate_code():
    return random.randint(100000, 999999)

def get_user_state(user_id):
    return user_states.get(user_id, None)

def set_user_state(user_id, state):
    user_states[user_id] = state

def save_data():
    with open(os.getenv('APPDATA') + '\\PC_Control_Bot\\Users.json', 'w') as file:
        json.dump({"verified": list(verified_users), "banned": list(banned_users)}, file)

def code_display(chat_id, name):
    window = Tk()
    window.title("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    window.iconbitmap(resource_path("icon.ico"))

    window.geometry("250x90")
    window.resizable(False, False)

    frame = Frame(window, bd=0)

    lbl0 = Label(window, text=f'–ö–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n{name}')
    lbl0.pack(pady=(0, 0))

    for i in range(6):
        lbl1 = Label(frame, text=f'{str(user_data[chat_id])[i]}')
        lbl1.grid(row=1, column=i)

    frame.place(relx=0.5, rely=0.5, anchor='center')

    window.mainloop()

def get_keyboard() -> types.ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    but1 = types.KeyboardButton("/shutdown")
    but2 = types.KeyboardButton("/ping")
    but3 = types.KeyboardButton("/hibernation")
    but5 = types.KeyboardButton("/screenshot")
    but6 = types.KeyboardButton("/lock")
    but4 = types.KeyboardButton("/cancel")
    markup.add(but1, but2, but3, but5, but6, but4)
    return markup

def time_select1(message):
    txt = message.text
    user_id = message.from_user.id

    if txt == "–ù–∞–∑–∞–¥":
        markup = get_keyboard()
        bot.reply_to(message, "–í—ã—Ö–æ–¥", parse_mode='html', reply_markup=markup)
        set_user_state(user_id, None)

    elif txt == "–ß–∞—Å—ã":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        but1 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        markup.add(but1)
        bot.reply_to(message, "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤?", parse_mode='html', reply_markup=markup)
        set_user_state(user_id, "Expectation_Hour")
        bot.register_next_step_handler(message, time_hour)

    elif txt == "–ú–∏–Ω—É—Ç—ã":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        but1 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        markup.add(but1)
        bot.reply_to(message, "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç?", parse_mode='html', reply_markup=markup)
        set_user_state(user_id, "Expectation_Minute")
        bot.register_next_step_handler(message, time_Minute)

    elif txt == "–°–µ–∫—É–Ω–¥—ã":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        but1 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        markup.add(but1)
        bot.reply_to(message, "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥?", parse_mode='html', reply_markup=markup)
        set_user_state(user_id, "Expectation_Second")
        bot.register_next_step_handler(message, time_Second)

    else:
        markup = get_keyboard()
        bot.reply_to(message, "–û—Ç–º–µ–Ω–∞", parse_mode='html', reply_markup=markup)
        set_user_state(user_id, None)


def time_hour(message):
    user_id = message.from_user.id
    time = message.text
    markup = get_keyboard()
    if time == "–û—Ç–º–µ–Ω–∞":
        bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—Ç", parse_mode='html', reply_markup=markup)
        set_user_state(user_id, None)
        return
    else:
        try:
            os.system(f'shutdown /s /t {int(time) * 3600}')
            bot.reply_to(message, time_message(int(time) * 3600), parse_mode='html', reply_markup=markup)
            set_user_state(user_id, None)
            return
        except:
            bot.reply_to(message, '–û—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞', parse_mode='html', reply_markup=markup)
            set_user_state(user_id, None)
            return

def time_Minute(message):
    user_id = message.from_user.id
    time = message.text
    markup = get_keyboard()
    if time == "–û—Ç–º–µ–Ω–∞":
        bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—Ç", parse_mode='html', reply_markup=markup)
        set_user_state(user_id, None)
        return
    else:
        try:
            os.system(f'shutdown /s /t {int(time) * 60}')
            bot.reply_to(message, time_message(int(time) * 60), parse_mode='html', reply_markup=markup)
            set_user_state(user_id, None)
            return
        except:
            bot.reply_to(message, '–û—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞',  parse_mode='html', reply_markup=markup)
            set_user_state(user_id, None)
            return

def time_Second(message):
    user_id = message.from_user.id
    time = message.text
    markup = get_keyboard()
    if time == "–û—Ç–º–µ–Ω–∞":
        bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—Ç", parse_mode='html', reply_markup=markup)
        set_user_state(user_id, None)
        return
    else:
        try:
            os.system(f'shutdown /s /t {int(time)}')
            bot.reply_to(message, time_message(int(time)), parse_mode='html', reply_markup=markup)
            set_user_state(user_id, None)
            return
        except:
            bot.reply_to(message, '–û—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞', parse_mode='html', reply_markup=markup)
            set_user_state(user_id, None)
            return

def time_message(seconds):
    if seconds >= 3600:
        hours = seconds / 3600
        unit = "—á–∞—Å" if hours < 2 else "—á–∞—Å–∞" if hours < 5 else "—á–∞—Å–æ–≤"
        return f"–ö–æ–º–ø—å—é—Ç–µ—Ä –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {round(hours)} {unit} üïë"
    elif seconds >= 60:
        minutes = seconds / 60
        unit = "–º–∏–Ω—É—Ç—É" if minutes < 2 else "–º–∏–Ω—É—Ç—ã" if minutes < 5 else "–º–∏–Ω—É—Ç"
        return f"–ö–æ–º–ø—å—é—Ç–µ—Ä –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {round(minutes)} {unit} üïë"
    elif seconds > 0:
        unit = "—Å–µ–∫—É–Ω–¥—É" if seconds < 2 else "–°–µ–∫—É–Ω–¥—ã" if seconds < 5 else "—Å–µ–∫—É–Ω–¥"
        return f"–ö–æ–º–ø—å—é—Ç–µ—Ä –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {seconds} {unit} üïë"
    else:
        return "–ö–æ–º–ø—å—é—Ç–µ—Ä –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è"

def on_clicked_trei(icon, item):
    if str(item) == "–û—Ç—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞":
        os.remove(os.getenv('APPDATA') + '\\PC_Control_Bot\\token')
        messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–¢–æ–∫–µ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
        python = sys.executable
        os.execl(python, python, *sys.argv)
    elif str(item) == "–û—Ç—á–∏—Å—Ç–∫–∞ –Æ–∑–µ—Ä–∞":
        os.remove(os.getenv('APPDATA') + '\\PC_Control_Bot\\Users.json')
        messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
        python = sys.executable
        os.execl(python, python, *sys.argv)
    elif str(item) == "–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å":
        os.remove(os.getenv('APPDATA') + '\\PC_Control_Bot\\token')
        os.remove(os.getenv('APPDATA') + '\\PC_Control_Bot\\Users.json')
        os.rmdir(os.getenv('APPDATA') + '\\PC_Control_Bot')
        messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
        python = sys.executable
        os.execl(python, python, *sys.argv)
    elif str(item) == "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å":
        python = sys.executable
        os.execl(python, python, *sys.argv)
    elif str(item) == "–í—ã—Ö–æ–¥":
        icon.stop()
        try:
            os._exit(0)
        except SystemExit:
            print("Exiting...")

def trei():
    image = Image.open(resource_path("logo_init.png"))
    if debug == 1:
        icon = pystray.Icon('PC Control Bot', image, menu=pystray.Menu(
            pystray.MenuItem('Debug', pystray.Menu(
                             pystray.MenuItem("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", on_clicked_trei),
                             pystray.MenuItem("–û—Ç—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞", on_clicked_trei),
                             pystray.MenuItem("–û—Ç—á–∏—Å—Ç–∫–∞ –Æ–∑–µ—Ä–∞", on_clicked_trei),
                             pystray.MenuItem("–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å", on_clicked_trei)
                             )),
            pystray.MenuItem("–í—ã—Ö–æ–¥", on_clicked_trei)
        ))
    else:
        icon = pystray.Icon('PC Control Bot', image, menu=pystray.Menu(
            pystray.MenuItem("–í—ã—Ö–æ–¥", on_clicked_trei),
        ))

    return icon

def trei_start(icon):
    icon.run()

def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

def notification_system(title, message, icon="icon.png"):
    notification = Notify()
    try:
        notification.application_name = bot.get_my_name().name
    except NameError:
        notification.application_name = "Bot"
    notification.title = title
    notification.message = message
    notification.icon = resource_path(icon)
    notification.send()


def internet_check():
    timeout = 1
    internet = False
    trying = 0
    while not internet:
        try:
            requests.head("http://www.google.com/", timeout=timeout)
            internet = True
            time.sleep(1)
        except requests.exceptions.ConnectionError:
            if trying == 1:
                notification_system('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º')
            print('–û—à–∏–±–∫–∞')
            trying = trying + 1
            time.sleep(5)


####################
#   –û–°–ù–û–í–ù–û–ô –ö–û–î   #
####################


""" –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ APPDATA –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –µ–≥–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ """

icon = trei()

t2 = threading.Thread(target=trei_start, args=(icon,))
t2.start()

if debug == 1:
    notification_system('–í–Ω–∏–º–∞–Ω–∏–µ!', '–ó–∞–ø—É—â–µ–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è')

try:
    f = open(os.getenv('APPDATA') + '\\PC_Control_Bot\\token', 'r')
    f.close()
except (IOError) and (Exception):
    window = Tk()
    window.title("–¢–µ—Å—Ç –æ–∫–Ω–æ")

    lbl = Label(window, text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –¢–æ–∫–µ–Ω")
    lbl.grid(column=1, row=0)

    enter_token = Entry(window)
    enter_token.grid(column=1, row=1)

    confirm_button = Button(window, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", command=on_confirm)
    confirm_button.grid(column=0, row=2)

    exit_button = Button(window, text="–í—ã–π—Ç–∏", command=on_exit)
    exit_button.grid(column=3, row=2)

    window.mainloop()

"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

if not os.path.exists(os.getenv('APPDATA') + '\\PC_Control_Bot\\Users.json'):
    with open(os.getenv('APPDATA') + '\\PC_Control_Bot\\Users.json', 'w') as file:
        json.dump({"verified": [], "banned": []}, file)

with open(os.getenv('APPDATA') + '\\PC_Control_Bot\\Users.json') as file:
    data = json.load(file)

verified_users = set(data['verified'])
banned_users = set(data['banned'])


token_code = open(os.getenv('APPDATA') + '\\PC_Control_Bot\\token', 'r')
token = token_code.read()
token_code.close()

alive = True

while alive == True:
    try:

        internet_check()

        bot = telebot.TeleBot(token)

        icon.icon = Image.open(resource_path("logo_work.png"))

        @bot.message_handler(commands=['start'], func=lambda message: get_user_state(message.chat.id) == None)
        def send_welcome(message):
            user_id = message.from_user.id
            if login_system(user_id) == "val":
                markup = get_keyboard()
                bot.reply_to(message, "–í—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫", parse_mode='html', reply_markup=markup)
            elif login_system(user_id) == "ban":
                bot.reply_to(message,
                             "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–ª–∏–µ–Ω—Ç–µ")
            else:
                bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /ver")


        @bot.message_handler(commands=['ver'], func=lambda message: get_user_state(message.chat.id) == None)
        def ver_message(message):
            user_id = message.from_user.id
            if login_system(user_id) == "val":
                bot.send_message(message.chat.id, f'–ù–µ —Å—Ç–æ–∏—Ç {message.from_user.first_name}. –í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã')
            elif login_system(user_id) == "ban":
                bot.send_message(message.chat.id, f'–í—ã —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
            else:
                chat_id = message.chat.id
                user_data[chat_id] = generate_code()
                print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", user_data[chat_id])
                t1 = threading.Thread(target=code_display, args=(chat_id, message.from_user.first_name,))
                t1.start()
                bot.send_message(message.chat.id,
                                 f'–í–∞–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–≤–µ–ª–∏—Å—å —á–∏—Å–ª–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å—é–¥–∞ –¥–ª—è '
                                 f'–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞')
                set_user_state(user_id, 'waiting_for_code')


        @bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == 'waiting_for_code')
        def check_code(message):
            chat_id = message.chat.id
            user_id = message.from_user.id
            try:
                user_code = int(message.text)
                if chat_id in user_data and user_data[chat_id] == user_code:
                    markup = get_keyboard()
                    bot.reply_to(message, "–ö–æ–¥ –≤–∞–ª–∏–¥–µ–Ω! –í—ã —Ç–µ–ø–µ—Ä—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.", parse_mode='html', reply_markup=markup)
                    verified_users.add(user_id)
                    save_data()
                    set_user_state(user_id, None)
                else:
                    bot.reply_to(message, "–ö–æ–¥ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω. –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
                    banned_users.add(user_id)
                    save_data()
                    set_user_state(user_id, None)
            except ValueError:
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥.")


        @bot.message_handler(commands=['shutdown'], func=lambda message: get_user_state(message.chat.id) == None)
        def shutdown(message):
            user_id = message.from_user.id
            if login_system(user_id) == "val":
                set_user_state(user_id, 'Selects_the_input_type_time')
                type_time = types.ReplyKeyboardMarkup(resize_keyboard=True)
                but0 = types.KeyboardButton("–ß–∞—Å—ã")
                but1 = types.KeyboardButton("–ú–∏–Ω—É—Ç—ã")
                but2 = types.KeyboardButton("–°–µ–∫—É–Ω–¥—ã")
                but3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
                type_time.add(but0, but1, but2, but3)
                bot.send_message(message.chat.id, '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è?',
                                 parse_mode='html', reply_markup=type_time)
                bot.register_next_step_handler(message, time_select1)

            elif login_system(user_id) == "ban":
                bot.reply_to(message,
                             "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–ª–∏–µ–Ω—Ç–µ")
            else:
                bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /ver")


        @bot.message_handler(commands=['cancel'], func=lambda message: get_user_state(message.chat.id) == None)
        def cancel(message):
            user_id = message.from_user.id
            if login_system(user_id) == "val":
                cancel = os.system('shutdown /a')
                print(cancel)
                if cancel == 1116:
                    bot.reply_to(message, '–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è')
                else:
                    bot.reply_to(message, '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
            elif login_system(user_id) == "ban":
                bot.reply_to(message,
                             "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–ª–∏–µ–Ω—Ç–µ")
            else:
                bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /ver")


        @bot.message_handler(commands=['ping'], func=lambda message: get_user_state(message.chat.id) == None)
        def ping(message):
            user_id = message.from_user.id
            if login_system(user_id) == "val":
                image = Image.open(resource_path("logo_ping.png"))
                icon.icon = image
                notification_system('–ü–∏–Ω–≥!', '–í–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –±—ã–ª –ø–∏–Ω–≥–∞–Ω—É—Ç!', 'logo_ping.png')
                bot.reply_to(message, '–ö–æ–º–ø—å—é—Ç–µ—Ä –æ–Ω–ª–∞–π–Ω!')
                image = Image.open(resource_path("logo_work.png"))
                icon.icon = image
            elif login_system(user_id) == "ban":
                bot.reply_to(message,
                             "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–±—Ä–æ—Å–∏—Ç—å "
                             "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–ª–∏–µ–Ω—Ç–µ")
            else:
                bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /ver")


        @bot.message_handler(commands=['screenshot'], func=lambda message: get_user_state(message.chat.id) == None)
        def screenshot(message):
            user_id = message.from_user.id
            if login_system(user_id) == "val":
                image = Image.open(resource_path("logo_screenshot.png"))
                icon.icon = image
                notification_system('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç', '–ë—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç!', 'logo_screenshot.png')
                screenshot = ImageGrab.grab(bbox=None, include_layered_windows=False, all_screens=True)
                filepath = os.getenv('APPDATA') + '\\PC_Control_Bot\\temp_screenshot.png'
                screenshot.save(filepath)
                with open(filepath, 'rb') as file:
                    bot.send_document(message.chat.id, file)
                os.remove(filepath)
                bot.send_message(message.chat.id, "–°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                image = Image.open(resource_path("logo_work.png"))
                icon.icon = image
            elif login_system(user_id) == "ban":
                bot.reply_to(message,
                             "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–±—Ä–æ—Å–∏—Ç—å "
                             "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–ª–∏–µ–Ω—Ç–µ")
            else:
                bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /ver")

        bot.polling(none_stop=True)

    except:
        image = Image.open(resource_path("logo_error.png"))
        icon.icon = image
        notification_system('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫', 'logo_error.png')
        time.sleep(5)
